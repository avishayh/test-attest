name: Docker Hello World

on:
  push:
    branches:
      - main  # Change this to the branch you want to monitor
  workflow_dispatch:

jobs:
  hello-docker:
    runs-on: ubuntu-latest
    permissions:
      actions: read             # using $GITHUB_OUTPUT
      id-token: write           # Necessary to create attestations
      attestations: write       # Necessary to push attestations to GH account
    env:
      DOCKER_REPO: 'evidence-demo-docker-dev'
      IMAGE_NAME: 'github-hello-world-sigstore'
      JF_USERNAME: 'avishayh'
      JF_URL: ${{ vars.JF_URL }}            # e.g: https://evidencetrial.jfrog.io/
      JF_REGISTRY: ${{ vars.JF_REGISTRY }}  # e.g: evidencetrial.jfrog.io
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      JF_PROJECT: "default"
#      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      with:
        version: latest
    - name: Authenticate Docker
      uses: docker/login-action@v3.4
      with:
          registry: ${{ env.JF_URL }}
          username: ${{ env.JF_USERNAME }}
          password: ${{ env.JF_ACCESS_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
#      with:
#        use: true
#        platforms: linux/amd64,linux/arm64
#        install: true

    - name: Build and push Docker image
      if: true
      id: build-and-push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}-action
        # Enable provenance and SBOM generation
        provenance: true
        sbom: true

    - name: Docker Build and Push
      id: docker
      run: |
        
        IMAGE_DIGEST="${{ steps.build-and-push.outputs.digest }}" # <--- Access the digest here
        echo "Docker Image Digest: $IMAGE_DIGEST"
        
        jf docker buildx build \
        --tag ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}-jf \
        --provenance=true --sbom=true \
        --metadata-file metadata.json \
        --push .
        
       docker buildx build \
        --tag ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}-docker \
        --provenance=false --sbom=false \
        --metadata-file metadata.json \
        --push .
        
       #capture digest to step output
       digest=$(cat metadata.json | jq '.["containerimage.digest"]')
       echo "docker_digest=$digest"
       echo "docker_digest=$digest" | tr -d '"' >> $GITHUB_OUTPUT

    - name: Generate docker attestation
      if: true
      id: attest-provenance
      uses: actions/attest-build-provenance@v2
      env:
        INPUT_PRIVATE-SIGNING: false       # true: avoid uploading to rekor transparency log
      with:
#        subject-name: ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} #e.g: evidencetrial.jfrog.io/evidence-demo-docker-dev/github-hello-world
#        subject-digest: ${{ steps.docker.outputs.docker_digest }}                         #e.g: sha256:5b756bece92a704cd1dbf971b650dd99d9f949a68ec8f3fa03b0d595694467a3
        subject-name: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}/${{ github.run_number }}-docker/manifest.json
        subject-digest: ${{ steps.build-and-push.outputs.digest }}                         #e.g: sha256:5b756bece92a704cd1dbf971b650dd99d9f949a68ec8f3fa03b0d595694467a3
        push-to-registry: false
    - name: Upload external attestation
      if: false
      uses: actions/attest@v2
      id: attest-predicate
      with:
        subject-name: ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                        #e.g: evidence-demo-docker-dev/github-hello-world
        subject-digest: ${{ steps.docker.outputs.docker_digest }}                         #e.g: sha256:5b756bece92a704cd1dbf971b650dd99d9f949a68ec8f3fa03b0d595694467a3
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        predicate: '{"key":"some value"}'
        push-to-registry: false
    - name: Install and sign with Cosign
      if: false
      run: |
          curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          cosign version
          echo "Signing image with cosign"
          #cosign sign ${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
    - name: Verify build artifact
      if: false
      env:
        GH_TOKEN: ${{ github.token }}     # required to add with gh tool
      run: |
        echo "Checking new attestation manifest "
        while IFS= read -r file; do
          echo "File: $file"
          cat "$file"
        done < ${RUNNER_TEMP}/created_attestation_paths.txt
        
        
        gh --version
          echo "Verify using repo ${{ github.repository }} and json format"
          gh attestation verify \
            oci://${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} \
            --repo ${{ github.repository }} \
            --bundle-from-oci \
            --format json | jq
          
          echo "Verify the predicate using owner ${{ github.repository_owner }} and json format"
          gh attestation verify \
            oci://${{ env.JF_REGISTRY }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} \
            --owner ${{ github.repository_owner }} \
            --bundle-from-oci \
            --predicate-type https://in-toto.io/attestation/release/v0.1 \
            --format json | jq
          echo DONE



